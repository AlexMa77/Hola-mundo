{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlexMa77/Hola-mundo/blob/main/Codigos%20de%20Phyton%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-t-bZGDiDx59"
      },
      "source": [
        "# Gestion de Tareas\n",
        "\n",
        "Este codigo lo que hace es gestionar las tareas de los usuarios permitiendo marcarlas como pendiente o completada"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "_vfeOQyj_cNZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 426
        },
        "outputId": "25c59cd0-2d51-47ec-d58f-a27181f23bb7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hola, vamos a asignar tareas a los usuarios \n",
            "Menú:\n",
            "1. Asignar tarea a un usuario\n",
            "2. Actualizar estado de tarea\n",
            "3. Listar tareas de un usuario\n",
            "4. Salir\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "Interrupted by user",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-c74eeb1d356b>\u001b[0m in \u001b[0;36m<cell line: 76>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 76\u001b[0;31m \u001b[0mtareas\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-1-c74eeb1d356b>\u001b[0m in \u001b[0;36mtareas\u001b[0;34m()\u001b[0m\n\u001b[1;32m     42\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"3. Listar tareas de un usuario\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m         \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"4. Salir\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 44\u001b[0;31m         \u001b[0mopcion\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Selecciona una opción (1-4): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     45\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mopcion\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"1\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    849\u001b[0m                 \u001b[0;34m\"raw_input was called, but this frontend does not support input requests.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    850\u001b[0m             )\n\u001b[0;32m--> 851\u001b[0;31m         return self._input_request(str(prompt),\n\u001b[0m\u001b[1;32m    852\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    853\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Interrupted by user\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarning\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid Message:\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexc_info\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: Interrupted by user"
          ]
        }
      ],
      "source": [
        "usuarios={}\n",
        "\n",
        "print(\"Hola, vamos a asignar tareas a los usuarios \")\n",
        "\n",
        "def asignarTa(usuario, tarea):\n",
        "    if usuario not in usuarios:\n",
        "        usuarios[usuario] = []\n",
        "    informacionTa = {\"tarea\": tarea, \"estado\": \"pendiente\"}\n",
        "    usuarios[usuario].append(informacionTa)\n",
        "    print(f\"Tarea '{tarea}' asignada a {usuario}.\\n\")\n",
        "\n",
        "def actualizarTa(usuario, tarea, actualizar):\n",
        "    if usuario in usuarios:\n",
        "        tareasUsu = [t[\"tarea\"] for t in usuarios[usuario]]\n",
        "\n",
        "        if tarea not in tareasUsu:\n",
        "            print(f\"La tarea '{tarea}' no existe para el usuario {usuario}\")\n",
        "            return\n",
        "\n",
        "        for t in usuarios[usuario]:\n",
        "            if t[\"tarea\"] == tarea:\n",
        "                t[\"estado\"] = actualizar\n",
        "                print(f\"Tarea '{tarea}' de {usuario} marcada como {actualizar}\\n\")\n",
        "                return\n",
        "    else:\n",
        "        print(f\"El usuario {usuario} no tiene tareas asignadas.\\n\")\n",
        "\n",
        "def listarTa(usuario):\n",
        "    if usuario in usuarios:\n",
        "        print(f\"Tareas de {usuario}:\")\n",
        "        for t in usuarios[usuario]:\n",
        "            print(f\"- {t['tarea']} [Estado: {t['estado']}]\")\n",
        "        print(\"\")\n",
        "    else:\n",
        "        print(f\"El usuario {usuario} no tiene tareas asignadas.\\n\")\n",
        "\n",
        "def tareas():\n",
        "    while True:\n",
        "        print(\"Menú:\")\n",
        "        print(\"1. Asignar tarea a un usuario\")\n",
        "        print(\"2. Actualizar estado de tarea\")\n",
        "        print(\"3. Listar tareas de un usuario\")\n",
        "        print(\"4. Salir\")\n",
        "        opcion = input(\"Selecciona una opción (1-4): \")\n",
        "\n",
        "        if opcion == \"1\":\n",
        "            usuario = input(\"Ingresa el nombre del usuario: \")\n",
        "            tarea = input(\"Ingresa la tarea a asignar: \")\n",
        "            asignarTa(usuario, tarea)\n",
        "\n",
        "        elif opcion == \"2\":\n",
        "            usuario = input(\"Ingresa el nombre del usuario: \")\n",
        "            listarTa(usuario)\n",
        "            if usuario in usuarios:\n",
        "                tarea = input(\"Ingresa la tarea a actualizar: \")\n",
        "                nuevo_estado = input(\"Ingresa el nuevo estado (completada/pendiente): \").lower()\n",
        "                if nuevo_estado in [\"completada\", \"pendiente\"]:\n",
        "                    actualizarTa(usuario, tarea, nuevo_estado)\n",
        "                else:\n",
        "                    print(\"Estado no válido. Debe ser 'completada' o 'pendiente'.\\n\")\n",
        "            else:\n",
        "                print(f\"El usuario {usuario} no tiene tareas asignadas.\\n\")\n",
        "\n",
        "        elif opcion == \"3\":\n",
        "            usuario = input(\"Ingresa el nombre del usuario para listar sus tareas: \")\n",
        "            listarTa(usuario)\n",
        "\n",
        "        elif opcion == \"4\":\n",
        "            print(\"Saliendo del sistema...\")\n",
        "            break\n",
        "\n",
        "        else:\n",
        "            print(\"Opción no válida. Intenta de nuevo.\\n\")\n",
        "\n",
        "\n",
        "tareas()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b4C3q1U7E7Hj"
      },
      "source": [
        "# LOTERIA\n",
        "\n",
        "Este codigo es un juego de loteria donde el usuario ganara premios dependiendo de los nuemos de su loteria, si la suma de los numeros es = 123 gana el premio mayor\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_eoJRGF_E_Gj"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "\n",
        "# Premios aleatorios en caso de no ganar el premio mayor\n",
        "def premios_consolacion():\n",
        "    premios = [\"Un juego de xbox  🎮   \", \"Un Smartwatch  ⌚  \", \"Un Dron  🛸  \", \"Un Mini proyector  🎥  \"]\n",
        "    return random.choice(premios)\n",
        "\n",
        "# Premio por ganar la loteria\n",
        "premio_gan = \"Una PS5 completamente nueva\"\n",
        "\n",
        "def mostrar_titulo():\n",
        "    titulo = \"\"\"\n",
        "    ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸\n",
        "    ✸                                                                     ✸\n",
        "    ✸    ██╗      ██████╗ ████████╗███████╗██████╗ ██╗ █████╗             ✸\n",
        "    ✸    ██║     ██╔═══██╗╚══██╔══╝██╔════╝██╔══██╗██║██╔══██╗            ✸\n",
        "    ✸    ██║     ██║   ██║   ██║   █████╗  ██████╔╝██║███████║            ✸\n",
        "    ✸    ██║     ██║   ██║   ██║   ██╔══╝  ██╔══██╗██║██╔══██║            ✸\n",
        "    ✸    ███████╗╚██████╔╝   ██║   ███████╗██║  ██║██║██║  ██║            ✸\n",
        "    ✸    ╚══════╝ ╚═════╝    ╚═╝   ╚══════╝╚═╝  ╚═╝╚═╝╚═╝  ╚═╝            ✸\n",
        "    ✸                                                                     ✸\n",
        "    ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸\n",
        "    ✸               ¡Bienvenido al Juego de la Suerte!                    ✸\n",
        "    ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸\n",
        "    \"\"\"\n",
        "    print(titulo)\n",
        "\n",
        "def main():\n",
        "    mostrar_titulo()\n",
        "\n",
        "if name== \"_main_\":\n",
        "    main()\n",
        "\n",
        "print (\"NOTA : Colocar 5 numeros sepados por ,  .Ejemplo: 21,21,23,54,64\" )\n",
        "print(\"------------------------------COMENCEMOS -----------------------------------\")\n",
        "\n",
        "usuario = input(\"Por favor, introduce tu nombre: \")\n",
        "\n",
        "while True:\n",
        " # Función del juego de lotería\n",
        " def juego_loteria():\n",
        "    print(\"✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ \")\n",
        "    num_lot = input(f\"Bienvenido {usuario}, por favor, introduce tu número de lotería : \").replace(\" \", \"\")\n",
        "    print(\"✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ \")\n",
        "\n",
        "    # Convertir el número del boleto en una lista de números enteros\n",
        "    numeros = [int(num) for num in num_lot.split(',')]\n",
        "\n",
        "    # Comprobar si se introdujeron los 5 números\n",
        "    if len(numeros) < 5:\n",
        "        print(f\"{usuario}, tu número no es válido. Asegúrate de que estás colocando al menos 5 números separados por comas.\")\n",
        "        return\n",
        "\n",
        "    suma_digitos = sum(numeros)\n",
        "\n",
        "    # La condición para ganar la lotería es que los números colocados sumen un total de 123\n",
        "    if suma_digitos == 123:\n",
        "        print(f\"¡Felicidades, {usuario}! Has ganado la lotería. Tu premio es una {premio_gan} 🎉🎉🎉\")\n",
        "    else:\n",
        "        premio = premios_consolacion()\n",
        "        print(f\"{usuario}, no has ganado la lotería, pero te daremos un premio de consolación: {premio} 😊\")\n",
        "\n",
        "# preguntamos al jugador si tiene otro boleto para ingresar\n",
        " juego_loteria()\n",
        " print(\"✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ \")\n",
        " rep = input(\"¿Tienes otro numero de loteria que quieras usar? :  (si/no) : \")\n",
        " if rep != \"si\" :\n",
        "    break\n",
        "print(\"✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ ✸ \")\n",
        "print(\"Gracias por jugar a la loteria, esperamos verte pronto\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j7BvBL8tGNdb"
      },
      "source": [
        "# APUESTAS DE FUTBOL\n",
        "\n",
        "Este es un codigo de apuestas donde el jugador tendra que recargar su saldo y acertar el nuero de goles del partido"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "D3q4Nt52GNla"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "# --------------------------------------------------------- codigo de DG --------------------------------------------------------------------\n",
        "def valiEdad(edad):\n",
        "    if edad >= 18:\n",
        "        return True\n",
        "    else:\n",
        "        print (\"_______________________________________________________________________________________________\")\n",
        "        print(\"Debes tener al menos 18 años para jugar.\")\n",
        "        return False\n",
        "# --------------------------------------------------------- codigo de DG --------------------------------------------------------------------\n",
        "def valiTarj():\n",
        "    while True:\n",
        "        print (\"_______________________________________________________________________________________________\")\n",
        "        tarjeta = input(\"Introduce el número de tu tarjeta (solo números, 10 dígitos): \")\n",
        "        if tarjeta.isdigit() and len(tarjeta) == 10:\n",
        "            return True\n",
        "        else:\n",
        "            print (\"_______________________________________________________________________________________________\")\n",
        "            print(\"Número de tarjeta inválido. Debe tener 10 dígitos.\")\n",
        "# ---------------------------------------------------------- codigo de DG ----------------------------------------------------------------------\n",
        "def recarga():\n",
        "    print (\"_______________________________________________________________________________________________\")\n",
        "    recargas = [10, 30, 50, 100]\n",
        "    print(\"Elige una cantidad para recargar: 10, 30, 50, 100\")\n",
        "    while True:\n",
        "        try:\n",
        "            print (\"_______________________________________________________________________________________________\")\n",
        "            recarga = int(input(\"Cantidad de recarga: \"))\n",
        "            if recarga in recargas:\n",
        "                return recarga\n",
        "            else:\n",
        "                print (\"_______________________________________________________________________________________________\")\n",
        "                print(\"Por favor elige una cantidad válida.\")\n",
        "        except ValueError:\n",
        "            print (\"_______________________________________________________________________________________________\")\n",
        "            print(\"Debe ser un número entero.\")\n",
        "print (\"_______________________________________________________________________________________________\")\n",
        "equipos = [\n",
        "    \"Arsenal\", \"Aston Villa\", \"Bournemouth\", \"Brentford\", \"Brighton\", \"Chelsea\",\n",
        "    \"Crystal Palace\", \"Everton\", \"Fulham\", \"Ipswich Town\", \"Leicester City\",\n",
        "    \"Liverpool\", \"Manchester City\", \"Manchester United\", \"Newcastle United\",\n",
        "    \"Nottingham Forest\", \"Southampton\", \"Tottenham Hotspur\", \"West Ham United\",\n",
        "    \"Wolverhampton\"\n",
        "]\n",
        "print (\"_______________________________________________________________________________________________\")\n",
        "# ---------------------------------------------------------------- codigo de AM -------------------------------------------------------------------\n",
        "def generar(equipos):\n",
        "    partidos = []\n",
        "    random.shuffle(equipos)\n",
        "    for i in range(0, len(equipos) - 1, 2):\n",
        "        equipol = equipos[i]\n",
        "        equipov = equipos[i + 1]\n",
        "        golesl = random.randint(0, 5)\n",
        "        golesv = random.randint(0, 5)\n",
        "        partidos.append((equipol, equipov, golesl, golesv))\n",
        "    return partidos\n",
        "# ------------------------------------------------------------------ codigo de DG ------------------------------------------------------------------\n",
        "texto = \"\"\"\n",
        "_________________________________________________________________________________________________________________\n",
        "||                                                                                                             ||\n",
        "||           ███████╗ █████╗           ███████╗██╗   ██╗████████╗ ██████╗██████╗  █████╗ ██████╗ ████████╗     ||\n",
        "||            ██╔════╝██╔══██╗         ██╔════╝██║   ██║╚══██╔══╝██╔════╝██╔══██╗██╔══██╗██╔══██╗╚══██╔══╝     ||\n",
        "||            █████╗  ███████║ █████╗  █████╗  ██║   ██║   ██║   ╚█████╗ ██████╔╝██║  ██║██████╔╝   ██║        ||\n",
        "||            ██╔══╝  ██╔══██║ ╚════╝  ██╔══╝  ██║   ██║   ██║    ╚═══██╗██╔═══╝ ██║  ██║██╔══██╗   ██║        ||\n",
        "||            ██║     ██║  ██║         ██║     ╚██████╔╝   ██║   ██████╔╝██║     ╚█████╔╝██║  ██║   ██║        ||\n",
        "||            ╚═╝     ╚═╝  ╚═╝         ╚═╝      ╚═════╝    ╚═╝   ╚═════╝ ╚═╝      ╚════╝ ╚═╝  ╚═╝   ╚═╝        ||\n",
        "||                                                                                                             ||\n",
        "||                        █████╗ ██████╗ ██╗   ██╗███████╗ ██████╗████████╗ █████╗  ██████╗                    ||\n",
        "||                       ██╔══██╗██╔══██╗██║   ██║██╔════╝██╔════╝╚══██╔══╝██╔══██╗██╔════╝                    ||\n",
        "||                       ███████║██████╔╝██║   ██║█████╗  ╚█████╗    ██║   ███████║╚█████╗                     ||\n",
        "||                       ██╔══██║██╔═══╝ ██║   ██║██╔══╝   ╚═══██╗   ██║   ██╔══██║ ╚═══██╗                    ||\n",
        "||                       ██║  ██║██║     ╚██████╔╝███████╗██████╔╝   ██║   ██║  ██║██████╔╝                    ||\n",
        "||                       ╚═╝  ╚═╝╚═╝      ╚═════╝ ╚══════╝╚═════╝    ╚═╝   ╚═╝  ╚═╝╚═════╝                     ||\n",
        "_________________________________________________________________________________________________________________\n",
        "\"\"\"\n",
        "print (texto)\n",
        "\n",
        "def juego():\n",
        "    print (\"_______________________________________________________________________________________________\")\n",
        "    print(\"Bienvenido a FA FUTSPORT APUESTAS\")\n",
        "    print (\"_______________________________________________________________________________________________\")\n",
        "    nombre = input(\"Ingresa tu nombre: \")\n",
        "    try:\n",
        "        print (\"_______________________________________________________________________________________________\")\n",
        "        edad = int(input(\"Ingresa tu edad: \"))\n",
        "    except ValueError:\n",
        "        print (\"_______________________________________________________________________________________________\")\n",
        "        print(\"La edad debe ser un número.\")\n",
        "        return\n",
        "\n",
        "    if not valiEdad(edad):\n",
        "        return\n",
        "\n",
        "    if not valiTarj():\n",
        "        return\n",
        "# --------------------------------------------------------- codigo de AM --------------------------------------------------------------------\n",
        "    saldo = recarga()\n",
        "    total_apostado = 0\n",
        "    total_ganado = 0\n",
        "\n",
        "    partidos = generar(equipos[:])\n",
        "# --------------------------------------------------------- codigo de AM --------------------------------------------------------------------\n",
        "    while True:\n",
        "        print (\"_______________________________________________________________________________________________\")\n",
        "        print(\"\\n--- Partidos disponibles ---\")\n",
        "        for i, (equipo_local, equipo_visitante, goles_local, goles_visitante) in enumerate(partidos):\n",
        "            print(f\"{i+1}. {equipo_local} vs {equipo_visitante}\")\n",
        "\n",
        "        while True:\n",
        "            try:\n",
        "                print (\"_______________________________________________________________________________________________\")\n",
        "                eleccion = int(input(f\"Elige el número del partido (1-{len(partidos)}): \"))\n",
        "                if 1 <= eleccion <= len(partidos):\n",
        "                    partido = partidos.pop(eleccion - 1)\n",
        "                    break\n",
        "                else:\n",
        "                    print (\"_______________________________________________________________________________________________\")\n",
        "                    print(f\"Por favor elige un número entre 1 y {len(partidos)}.\")\n",
        "            except ValueError:\n",
        "                print (\"_______________________________________________________________________________________________\")\n",
        "                print(\"Debes elegir un número válido.\")\n",
        "\n",
        "        equipol, equipov, golesl, golesv = partido\n",
        "\n",
        "        while True:\n",
        "            try:\n",
        "                print (\"_______________________________________________________________________________________________\")\n",
        "                apuesta = int(input(f\"¿Cuánto deseas apostar a {equipol} vs {equipov}? (Saldo disponible: {saldo}): \"))\n",
        "                if apuesta > saldo:\n",
        "                    print (\"_______________________________________________________________________________________________\")\n",
        "                    print(\"No tienes suficiente saldo para realizar esta apuesta.\")\n",
        "                elif apuesta <= 0:\n",
        "                    print (\"_______________________________________________________________________________________________\")\n",
        "                    print(\"La apuesta debe ser mayor a 0.\")\n",
        "                else:\n",
        "                    saldo -= apuesta\n",
        "                    total_apostado += apuesta\n",
        "                    break\n",
        "            except ValueError:\n",
        "                print (\"_______________________________________________________________________________________________\")\n",
        "                print(\"Debes ingresar un número válido para la apuesta.\")\n",
        "\n",
        "        while True:\n",
        "            print (\"_______________________________________________________________________________________________\")\n",
        "            prediccion = input(f\"Predicción de goles para {equipol} vs {equipov} (ej. 2-1): \")\n",
        "            try:\n",
        "                predlocal, predvisitante = map(int, prediccion.split('-'))\n",
        "                break\n",
        "            except ValueError:\n",
        "                print(\"La predicción debe ser en el formato 'goles_local-goles_visitante'.\")\n",
        "\n",
        "        if predlocal == golesl and predvisitante == golesv:\n",
        "            print (\"_______________________________________________________________________________________________\")\n",
        "            print(f\"¡Has ganado! El resultado fue {golesl}-{golesv}.\")\n",
        "            saldo += apuesta * 2\n",
        "            total_ganado += apuesta * 2\n",
        "        else:\n",
        "            print(f\"Has perdido. El resultado fue {golesl}-{golesv}.\")\n",
        "            print (\"_______________________________________________________________________________________________\")\n",
        "        if len(partidos) == 0:\n",
        "            print(\"No quedan más partidos disponibles.\")\n",
        "            break\n",
        "        print (\"_______________________________________________________________________________________________\")\n",
        "        continuar = input(\"¿Quieres seguir apostando? (si/no): \")\n",
        "        print (\"_______________________________________________________________________________________________\")\n",
        "        if continuar.lower() != 'si':\n",
        "            print(f\"\\nJuego terminado. Total apostado: {total_apostado}, Total ganado: {total_ganado}, Saldo final: {saldo}\")\n",
        "            print (\"_______________________________________________________________________________________________\")\n",
        "            break\n",
        "if __name__ == \"__main__\":\n",
        "    juego()"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMaAewP7tW3tABzhIO6RrLF",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}